service: product-service

provider:
  name: aws
  runtime: nodejs16.x
  stage: dev
  region: us-east-1

  environment:
    PG_HOST: ${env:PG_HOST}
    PG_PORT: ${env:PG_PORT}
    PG_DATABASE: ${env:PG_DATABASE}
    PG_USERNAME: ${env:PG_USERNAME}
    PG_PASSWORD: ${env:PG_PASSWORD}
    SQS_URL: SQSQueue
    CREATE_PRODUCT_TOPIC_ARN:
      Ref: SNSTopic

  iamRoleStatements:
    - Effect: Allow
      Action: sns:*
      Resource:
        - Fn::GetAtt:
          - SQSQueue
          - Arn
    - Effect: Allow
      Action: sns:*
      Resource:
        Ref: SNSTopic

useDotenv: true

plugins:
  - serverless-auto-swagger
  - serverless-webpack

custom:
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: true
  autoswagger:
    apiType: "httpApi"
    generateSwaggerOnDeploy: true
    typefiles: [ './src/models/types.ts' ]
    title: 'product-service'
    host: 'o3kxai97f3.execute-api.us-east-1.amazonaws.com/dev'

functions:
  getProductsList:
    handler: handler.getProductsList
    environment:
      TABLE_PRODUCTS: products
      TABLE_STOCKS: stocks
    events:
      - http:
          path: products
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
  getProductsById:
    handler: handler.getProductsById
    environment:
      TABLE_PRODUCTS: products
      TABLE_STOCKS: stocks
    events:
      - http:
          path: products/{productId}
          method: get
          request:
            parameters:
              paths:
                productId: true
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
  createProduct:
    handler: handler.createProduct
    environment:
      TABLE_PRODUCTS: products
      TABLE_STOCKS: stocks
    events:
      - http:
          path: products
          method: post
          bodyType: 'Product'
          responses:
            201:
              description: 'Successful Product response'
              bodyType: 'Product'
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
  catalogBatchProcess:
    handler: handler.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn:
            Fn::GetAtt: [SQSQueue, Arn]

resources:
  Resources:
    SQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: catalogItemsQueue
    SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: createProductTopic
    SNSSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: email
        Endpoint: ${env:SUBSCRIPTON_EMAIL1}
        TopicArn:
          Ref: SNSTopic
    SNSExpensiveProductSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: ${env:SUBSCRIPTON_EMAIL2}
        Protocol: email
        TopicArn:
          Ref: SNSTopic
        FilterPolicy:
          price: [{ "numeric": [">=", 100] }]

  Outputs:
    SQSQueueOutput:
      Value:
        Fn::GetAtt: [ SQSQueue, Arn ]
      Export:
        Name: SQSQueueOutput